CREATE TABLE DeliveryType (
                              deliveryTypeId SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                              name VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE ProductType (
                             productTypeId SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                             name VARCHAR(30)
);

CREATE TABLE "User" (
                        userId INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        phoneNumber VARCHAR(10) UNIQUE NOT NULL,
                        email VARCHAR(80) UNIQUE,
                        firstname VARCHAR(30) NOT NULL,
                        lastname VARCHAR(30),
                        hashPassword VARCHAR(512) NOT NULL,
                        access CHAR(1) NOT NULL CHECK (access IN ('U', 'M', 'A')),
                        region VARCHAR(30),
                        district VARCHAR(30),
                        city VARCHAR(30),
                        street VARCHAR(30),
                        building SMALLINT,
                        apartment SMALLINT,
                        postalCode INT
);

CREATE TABLE UnregisteredCustomer (
                                      unregisteredCustomerId INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                      phoneNumber VARCHAR(10) UNIQUE NOT NULL,
                                      firstname VARCHAR(30) NOT NULL,
                                      lastname VARCHAR(30),
                                      region VARCHAR(30) NOT NULL,
                                      district VARCHAR(30),
                                      city VARCHAR(30) NOT NULL,
                                      street VARCHAR(30) NOT NULL,
                                      building SMALLINT NOT NULL,
                                      apartment SMALLINT,
                                      postalCode INT
);

CREATE TABLE Product (
                         productId INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                         name VARCHAR(128) NOT NULL,
                         description TEXT,
                         price DECIMAL(10, 2) NOT NULL,
                         stock INT NOT NULL
);

CREATE TABLE TypeUnit (
                          productId INT REFERENCES Product(productId) ON DELETE CASCADE,
                          productTypeId SMALLINT REFERENCES ProductType(productTypeId) ON DELETE CASCADE,
                          PRIMARY KEY (productId, productTypeId)
);

CREATE TABLE "Order" (
                         orderId INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                         userId INT REFERENCES "User"(userId) ON DELETE SET NULL,
                         unregisteredCustomerId INT REFERENCES UnregisteredCustomer(unregisteredCustomerId) ON DELETE SET NULL,
                         deliveryTypeId SMALLINT REFERENCES DeliveryType(deliveryTypeId) ON DELETE SET NULL,
                         total DECIMAL(12,2) NOT NULL CHECK (total >= 0.00),
                         postTime TIMESTAMP NOT NULL,
                         completeTime TIMESTAMP,
                         status CHAR(1) NOT NULL CHECK (status IN ('P', 'A', 'S', 'D', 'C', 'H')),

                         CONSTRAINT PersonIdentity CHECK ((userId IS NULL) != (unregisteredCustomerId IS NULL)),
                         CONSTRAINT PostInPast CHECK (postTime < NOW()::timestamp),
                         CONSTRAINT TimeConstraintNull CHECK ((postTime IS NOT NULL AND completeTime IS NULL) OR status = 'C'),
                         CONSTRAINT TimeConstraintPersistent CHECK (completeTime > postTime)
);
-- P - posted
-- A - accepted
-- S - shipping
-- D - delivered
-- C - completed
-- H - ABOLISHED

CREATE TABLE OrderProducts (
                               orderProductsId INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                               orderId INT NOT NULL REFERENCES "Order"(orderId) ON DELETE CASCADE,
                               productId INT NOT NULL REFERENCES Product(productId) ON DELETE CASCADE,
                               quantity INT NOT NULL,
                               sum DECIMAL(12, 2) NOT NULL CHECK (sum >= 0.00)
);
